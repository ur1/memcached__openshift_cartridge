#!/bin/bash

# https://docs.openshift.org/origin-m4/oo_cartridge_developers_guide.html#bin-control
# control <action>
# The control script allows OpenShift or user to control the state of the cartridge.


source ${OPENSHIFT_MEMCACHED_DIR}bin/_common

# for _msg function in _common file
# this use for change formatting messages if this scripts run by rhc or openshift
# 1 = show with prefixes for rhc
export non_direct_request=1


local_pref="${global_pref}|control|"


start () {
    local p
    p="${local_pref}start|"
    _msg "$p begin"

    _memcached_display_versions

    if ! hash memcached 2>/dev/null ; then
        _msg "${global_pref} cart not started properly"
        _msg "Check logs"
        _msg " "          ':MSG_NO_TIME:'
        _msg "## Manual input instructions #############################################"           ':MSG_NO_TIME:'
        _msg "rhc ssh --app $OPENSHIFT_APP_NAME '\$memcached_real_install'"                         ':MSG_NO_TIME:'
        _msg "More info in interactive log"                                                         ':MSG_NO_TIME:'
        _msg "rhc tail -f ${memcached_log_actions#$OPENSHIFT_HOMEDIR} --app $OPENSHIFT_APP_NAME"    ':MSG_NO_TIME:'
        _msg "## Manual input instructions #############################################"           ':MSG_NO_TIME:'
        _msg " "          ':MSG_NO_TIME:'

        _msg "$p end"

        exit 1
    fi

    local pid
    pid=${OSC__MEMCACHED_PID}

    local sock
    sock=${OSC__MEMCACHED_SOCK}


    if pgrep "memcached" >/dev/null && [ -f "${pid}" ]; then
        _msg "$p [OK] already running"
    else
        memcached -d \
            -s ${sock} -P ${pid} \
            -m ${OSC__MEMCACHED_MEM} \
            -a 0600 \
            -v &> ${OSC__MEMCACHED_LOG_PREFIX}memcached.log

        wait_for_pid_file ${pid} &&
            _msg "[OK] started"  ':MSG_NO_TIME:'
    fi

    _msg "$p pid=\"`cat ${pid}`\""

    _msg "$p end"
}


stop () {
    local p
    p="${local_pref}stop|"

    local pid
    pid=${OSC__MEMCACHED_PID}

    _msg "$p begin"

    if pgrep "memcached" >/dev/null && [ -f "${pid}" ]; then
        kill -QUIT $( cat ${pid} )
        wait_for_stop ${pid} &&
            _msg "[OK] stopped" ':MSG_NO_TIME:'
    else
        _msg "$p not started"
    fi

    rm -rf ${OSC__MEMCACHED_SOCK} &&
        _msg "$p clean sock-file"

    rm -rf ${pid} &&
        _msg "$p clean pid-file"

    _msg "$p end"
}



status () {
    memcached_ping &>/dev/null
    return $?
}


tidy () {
    local p
    p="${local_pref}tidy|"
    _msg "$p begin"

    rm -f ${OSC__MEMCACHED_LOG_PREFIX}*

    _msg "$p end"
}


_msg "${global_pref} DO >$1<"


case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   stop; start ;;
  status)    status ;;
  tidy)      tidy ;;
  *)         exit 0
esac
